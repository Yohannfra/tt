#!/usr/bin/env python3

import sys
import json
import os
import datetime
import argparse
from typing import List

from rich.console import Console
from rich.table import Table
from dataclasses import dataclass
from rich.tree import Tree

import dateutil.parser


@dataclass
class Record:
    start: str
    end: str
    task: str


HOME_DIR = os.environ.get("HOME")
if not HOME_DIR:
    sys.exit("$HOME not defined")

STORAGE_DIR = HOME_DIR + "/.tt"


def delta_to_str(delta: datetime.timedelta) -> str:
    s = ""

    hours, remainder = divmod(delta.seconds, 3600)
    minutes, _ = divmod(remainder, 60)

    if delta.days > 0:
        s += f"{delta.days}d "
    s += f"{hours}h:{minutes}m"

    return s


def get_projects() -> List[str]:
    projects = []

    directory = f"{STORAGE_DIR}/records"
    files = [
        item
        for item in os.listdir(directory)
        if os.path.isfile(os.path.join(directory, item))
    ]

    for f in files:
        projects.append(os.path.splitext(f)[0])

    projects.sort()
    return projects


def get_records(project_name: str) -> List[Record]:
    records = []

    with open(f"{STORAGE_DIR}/records/{project_name}.json", "r") as f:
        fc = f.read()
        fc_json = json.loads(fc)
        for r in fc_json:
            records.append(
                Record(
                    start=r["start"],
                    end=r["end"],
                    task=r["task"] if "task" in r else "",
                )
            )

    return records


def report(projects: List[str]) -> None:
    all_records: dict[str, List[Record]] = {}

    for p in projects:
        all_records[p] = get_records(p)

    console = Console()

    table = Table(show_header=True, header_style="bold")
    table.add_column("Project")
    table.add_column("Task")
    table.add_column("Start")
    table.add_column("End")
    table.add_column("Total", justify="right")

    total_sum = datetime.timedelta()
    for project, records in all_records.items():
        project_sum = datetime.timedelta()

        first_record = True
        for record in records:
            PRETTY_FORMAT = "%d/%m/%y %H:%M %Z"
            start = dateutil.parser.isoparse(record.start)

            if record.end:
                end = dateutil.parser.isoparse(record.end)
            else:
                end = None

            if end:
                delta = end - start
                project_sum += delta

                table.add_row(
                    f"[bold]{project}[/bold]" if first_record else None,
                    record.task,
                    start.strftime(PRETTY_FORMAT),
                    end.strftime(PRETTY_FORMAT),
                    delta_to_str(delta),
                )
            else:
                table.add_row(
                    f"[bold]{project}[/bold]" if first_record else None,
                    record.task,
                    start.strftime(PRETTY_FORMAT),
                    "N/A",
                    "N/A",
                )

            first_record = False

        total_sum += project_sum

        table.add_row(
            None,
            None,
            None,
            "[bold]TOTAL[/bold]",
            f"[bold]{delta_to_str(project_sum)}[/bold]",
        )
        # add blank line
        table.add_row()

    # add blank line
    table.add_row()

    table.add_row(
        None,
        None,
        None,
        "[bold]TOTAL[/bold]",
        f"[bold]{delta_to_str(total_sum)}[/bold]",
    )

    console.print(table)


def init_storage_dir() -> None:
    print("Storage directory not found, creating it at:", STORAGE_DIR)

    os.mkdir(STORAGE_DIR)
    os.mkdir(STORAGE_DIR + "/records")
    set_current("")


def get_current() -> str | None:
    """
    Read the current.json file and return the name of the current project
    """
    with open(f"{STORAGE_DIR}/current.json", "r") as f:
        fc = f.read()
        fc_json = json.loads(fc)

        if "key" in fc_json:
            return fc_json["key"]

    return None


def set_current(key: str) -> None:
    with open(f"{STORAGE_DIR}/current.json", "w") as f:
        f.write(json.dumps({"key": key}, indent=4))


def parse_key(key: str) -> tuple[str, str | None]:
    task = None
    project = None

    if "@" in key:
        sp = key.split("@")
        task = sp[0]
        project = sp[1]
    else:
        project = key

    if not project:
        sys.exit("Key is not valid, project is empty")

    return project, task


def start(key: str) -> None:
    # verify that key is valid and parsable
    parse_key(key)

    current_key = get_current()

    console = Console()

    if current_key:
        if current_key == key:
            console.print(
                f"Tracking for {current_key} has already started", style="yellow"
            )
            sys.exit(0)
        else:
            console.print(
                f"Project {current_key} is already being tracked", style="red"
            )
            sys.exit(1)

    project, task = parse_key(key)

    now = datetime.datetime.now().isoformat()

    with open(f"{STORAGE_DIR}/records/{project}.json", "a+") as f:
        f.seek(0)
        fc = f.read()
        if not fc:
            fc = "[]"
        fc_json = json.loads(fc)
        fc_json.append({"start": now, "task": task if task else None, "end": None})
        f.seek(0)
        f.truncate(0)
        f.write(json.dumps(fc_json, indent=4))

    set_current(key)
    console.print(f"Started tracking time for {key}", style="green")


def reset() -> None:
    current_key = get_current()

    console = Console()

    if not current_key:
        console.print("Time tracking is not started", style="red")
        sys.exit(1)

    project, _ = parse_key(current_key)

    now = datetime.datetime.now().isoformat()

    with open(f"{STORAGE_DIR}/records/{project}.json", "a+") as f:
        f.seek(0)
        fc = f.read()
        fc_json = json.loads(fc)
        fc_json[-1]["start"] = now
        f.seek(0)
        f.truncate(0)
        f.write(json.dumps(fc_json, indent=4))

    console.print(f"Reseted time tracking for {current_key}", style="green")


def cancel() -> None:
    current_key = get_current()

    console = Console()

    if not current_key:
        console.print("Time tracking is not started", style="red")
        sys.exit(1)

    project, _ = parse_key(current_key)

    with open(f"{STORAGE_DIR}/records/{project}.json", "a+") as f:
        f.seek(0)
        fc = f.read()
        fc_json = json.loads(fc)
        f.seek(0)
        f.truncate(0)
        f.write(json.dumps(fc_json[0:-1], indent=4))

    set_current("")
    console.print(f"Canceled current time tracking for {current_key}", style="green")


def stop() -> None:
    current_key = get_current()

    console = Console()

    if not current_key:
        console.print("Time tracking is not started", style="red")
        sys.exit(1)

    project, _ = parse_key(current_key)

    now = datetime.datetime.now().isoformat()

    with open(f"{STORAGE_DIR}/records/{project}.json", "a+") as f:
        f.seek(0)
        fc = f.read()
        fc_json = json.loads(fc)
        fc_json[-1]["end"] = now
        f.seek(0)
        f.truncate(0)
        f.write(json.dumps(fc_json, indent=4))

    set_current("")
    console.print("Stoped tracking time", style="green")


def status() -> None:
    current_key = get_current()

    console = Console()

    if not current_key:
        console.print("Not tracking anything", style="yellow")
        return

    project, _ = parse_key(current_key)
    records = get_records(project)

    start = dateutil.parser.isoparse(records[-1].start)
    now = datetime.datetime.now()

    console.print(f"Tracking {current_key}: {delta_to_str(now - start)}", style="green")


def delete(project: str) -> None:
    fp = f"{STORAGE_DIR}/records/{project}.json"

    console = Console()

    if not os.path.isfile(fp):
        console.print(f"Project {project} not found", style="red")
        sys.exit(1)

    os.remove(fp)
    console.print(f"Project {project} deleted", style="yellow")


def edit(project: str) -> None:
    fp = f"{STORAGE_DIR}/records/{project}.json"

    if not os.path.isfile(fp):
        console = Console()
        console.print(f"Project {project} not found", style="red")
        sys.exit(1)

    print(f"Opening {fp} with {os.environ.get('EDITOR')}")
    os.system(f"$EDITOR {fp}")
    print("Ok")


def list_projects() -> None:
    projects = get_projects()

    console = Console()

    tree = Tree("Projects")

    for p in projects:
        tree.add(p)

    console.print(tree)


def main():
    # argparse config
    parser = argparse.ArgumentParser(prog="tt")

    subparsers = parser.add_subparsers(
        title="commands", dest="command", required=True, help="Available commands"
    )

    # start
    subparsers.add_parser("start", help="Start tracking time").add_argument(
        "key",
        help="The name of the task or the project to start tracking ex: myapp | auth@myapp",
    )

    # edit
    subparsers.add_parser("edit", help="Edit a project with $EDITOR").add_argument(
        "project",
        help="The name of the project to edit",
    )

    # stop
    subparsers.add_parser("stop", help="Stop tracking your time")

    # reset
    subparsers.add_parser("reset", help="Reset the current tracking")

    # cancel
    subparsers.add_parser("cancel", help="Cancel the current tracking")

    # delete
    subparsers.add_parser("delete", help="Delete a project").add_argument(
        "project",
        help="The name of the project to delete",
    )

    # report
    subparsers.add_parser("report", help="Display report").add_argument(
        "project",
        nargs="?",
        help="The name of the project to report",
    )

    # list
    subparsers.add_parser("list", help="List projects")

    # status
    subparsers.add_parser("status", help="Display the current tracking status")

    args = parser.parse_args()

    # create STORAGE_DIR if it doesn't exists
    if not os.path.isdir(STORAGE_DIR):
        init_storage_dir()

    match args.command:
        case "report":
            projects = [args.project] if args.project else get_projects()
            report(projects)
        case "start":
            start(args.key)
        case "stop":
            stop()
        case "reset":
            reset()
        case "cancel":
            cancel()
        case "status":
            status()
        case "list":
            list_projects()
        case "delete":
            delete(args.project)
        case "edit":
            edit(args.project)


if __name__ == "__main__":
    main()
