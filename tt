#!/usr/bin/env python3

import sys
import json
import os
import datetime
import argparse
from typing import List

from rich.console import Console
from rich.table import Table
from dataclasses import dataclass

import dateutil.parser


@dataclass
class Record:
    start: str
    end: str
    task: str


STORAGE_DIR = ".tt"

# argument parser config
parser = argparse.ArgumentParser(prog="tt")

subparsers = parser.add_subparsers(
    title="commands", dest="command", required=True, help="Available commands"
)
subparsers.add_parser("start", help="Start tracking time").add_argument(
    "key",
    help="The name of the task or the project to start tracking ex: myapp | auth@myapp",
)

subparsers.add_parser("stop", help="Stop tracking your time")
subparsers.add_parser("delete", help="Delete a resource")
subparsers.add_parser("report", help="Display report")
subparsers.add_parser("status", help="Display the current tracking status")
parser.add_argument("-v", "--version", action="store_true", help="Version for tt")


def get_projects() -> List[str]:
    projects = []
    with open(f"{STORAGE_DIR}/projects.json", "r") as f:
        fc = f.read()
        fc_json = json.loads(fc)
        for p in fc_json:
            projects.append(p["name"])

    return projects


def get_record(project_name: str) -> List[Record]:
    records = []

    try:
        with open(f"{STORAGE_DIR}/records/{project_name}.json", "r") as f:
            fc = f.read()
            fc_json = json.loads(fc)
            for r in fc_json:
                records.append(
                    Record(
                        start=r["start"],
                        end=r["end"],
                        task=r["task"] if "task" in r else "",
                    )
                )

    except Exception as error:
        print(error)
        sys.exit(1)

    return records


def report(projects: List[str]):
    all_records: dict[str, List[Record]] = {}

    for p in projects:
        all_records[p] = get_record(p)

    console = Console()

    table = Table(show_header=True, header_style="bold")
    table.add_column("Project", style="bold")
    table.add_column("Task")
    table.add_column("Start")
    table.add_column("End")
    table.add_column("Total", justify="right")

    total_sum = datetime.timedelta()
    for project, records in all_records.items():
        project_sum = datetime.timedelta()

        first_record = True
        for record in records:
            PRETTY_FORMAT = "%m/%m/%y %H:%M %Z"
            start = dateutil.parser.isoparse(record.start)
            end = dateutil.parser.isoparse(record.end)

            delta = end - start
            hours, remainder = divmod(delta.seconds, 3600)
            minutes, _ = divmod(remainder, 60)

            project_sum += delta

            table.add_row(
                project if first_record else "",
                record.task,
                start.strftime(PRETTY_FORMAT),
                end.strftime(PRETTY_FORMAT),
                (f"{project_sum.days}d" if project_sum.days > 0 else "")
                + f" {hours}h:{minutes}m",
            )
            first_record = False

        total_sum += project_sum
        hours, remainder = divmod(project_sum.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        table.add_row(
            ".",
            ".",
            ".",
            "TOTAL",
            (f"{project_sum.days}d" if project_sum.days > 0 else "")
            + f" {hours}h:{minutes}m",
        )
        # add blank line
        table.add_row()

    # add blank line
    table.add_row()

    hours, remainder = divmod(total_sum.seconds, 3600)
    minutes, _ = divmod(remainder, 60)

    table.add_row(
        ".",
        ".",
        ".",
        "TOTAL",
        f"{total_sum.days}d {hours}h:{minutes}m",
    )

    console.print(table)


def init_storage_dir() -> None:
    print("Storage directory not found, creating it at:", STORAGE_DIR)

    os.mkdir(STORAGE_DIR)
    os.mkdir(STORAGE_DIR + "/records")
    with open(STORAGE_DIR + "/projects.json", "w+") as f:
        f.write("[]")
    set_current("")


def get_current():
    with open(f"{STORAGE_DIR}/current.json", "r") as f:
        fc = f.read()
        fc_json = json.loads(fc)

        if "key" in fc_json:
            return fc_json["key"]

    return None


def set_current(key: str):
    with open(f"{STORAGE_DIR}/current.json", "w") as f:
        f.write(json.dumps({"key": key}))


def parse_key(key: str):
    task = None
    project = None

    if "@" in key:
        sp = key.split("@")
        task = sp[0]
        project = sp[1]
    else:
        project = key

    if not project:
        return None

    return project, task


def start(key: str):
    current_key = get_current()

    console = Console()

    if current_key:
        if current_key == key:
            console.print(
                f"Tracking for {current_key} has already started", style="yellow"
            )
            sys.exit(0)
        else:
            console.print(
                f"Project {current_key} is already being tracked", style="red"
            )
            sys.exit(1)

    console.print(f"Started tracking time for {key}", style="green")
    set_current(key)


def stop():
    console = Console()
    console.print("Stoped tracking time", style="green")
    set_current("")


def status():
    current_key = get_current()

    console = Console()

    if not current_key:
        console.print("Not tracking anything", style="yellow")
    else:
        console.print(f"Tracking {current_key}", style="green")


def delete():
    console = Console()
    console.print("TODO", style="red")


def main():
    args = parser.parse_args()

    # create STORAGE_DIR if it doesn't exists
    if not os.path.isdir(STORAGE_DIR):
        init_storage_dir()

    if args.command == "report":
        projects = get_projects()
        report(projects)
    elif args.command == "start":
        start(args.key)
    elif args.command == "stop":
        stop()
    elif args.command == "status":
        status()
    elif args.command == "delete":
        pass


if __name__ == "__main__":
    main()
